#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Pijlpunten
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;

	
	
using System.IO;
using System.IO.IsolatedStorage;
using Microsoft.Phone.Data.Linq.Mapping;
using Microsoft.Phone.Data.Linq;


public class DebugWriter : TextWriter
{
    private const int DefaultBufferSize = 256;
    private System.Text.StringBuilder _buffer;

    public DebugWriter()
    {
        BufferSize = 256;
        _buffer = new System.Text.StringBuilder(BufferSize);
    }

    public int BufferSize
    {
        get;
        private set;
    }

    public override System.Text.Encoding Encoding
    {
        get { return System.Text.Encoding.UTF8; }
    }

    #region StreamWriter Overrides
    public override void Write(char value)
    {
        _buffer.Append(value);
        if (_buffer.Length >= BufferSize)
            Flush();
    }

    public override void WriteLine(string value)
    {
        Flush();

        using(var reader = new StringReader(value))
        {
            string line; 
            while( null != (line = reader.ReadLine()))
                System.Diagnostics.Debug.WriteLine(line);
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
            Flush();
    }

    public override void Flush()
    {
        if (_buffer.Length > 0)
        {
            System.Diagnostics.Debug.WriteLine(_buffer);
            _buffer.Clear();
        }
    }
    #endregion
}


	public partial class DBpijlpuntenContext : System.Data.Linq.DataContext
	{
		
		public bool CreateIfNotExists()
		{
			bool created = false;
			if (!this.DatabaseExists())
			{
				string[] names = this.GetType().Assembly.GetManifestResourceNames();
				string name = names.Where(n => n.EndsWith(FileName)).FirstOrDefault();
				if (name != null)
				{
					using (Stream resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream(name))
					{
						if (resourceStream != null)
						{
							using (IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile.GetUserStoreForApplication())
							{
								using (IsolatedStorageFileStream fileStream = new IsolatedStorageFileStream(FileName, FileMode.Create, myIsolatedStorage))
								{
									using (BinaryWriter writer = new BinaryWriter(fileStream))
									{
										long length = resourceStream.Length;
										byte[] buffer = new byte[32];
										int readCount = 0;
										using (BinaryReader reader = new BinaryReader(resourceStream))
										{
											// read file in chunks in order to reduce memory consumption and increase performance
											while (readCount < length)
											{
												int actual = reader.Read(buffer, 0, buffer.Length);
												readCount += actual;
												writer.Write(buffer, 0, actual);
											}
										}
									}
								}
							}
							created = true;
						}
						else
						{
							this.CreateDatabase();
							created = true;
						}
					}
				}
				else
				{
					this.CreateDatabase();
					created = true;
				}
			}
			return created;
		}
		
		public bool LogDebug
		{
			set
			{
				if (value)
				{
					this.Log = new DebugWriter();
				}
			}
		}
		
		public static string ConnectionString = "Data Source=isostore:/DBpijlpunten.sdf";

		public static string ConnectionStringReadOnly = "Data Source=appdata:/DBpijlpunten.sdf;File Mode=Read Only;";

		public static string FileName = "DBpijlpunten.sdf";

		public DBpijlpuntenContext(string connectionString) : base(connectionString)
		{
			OnCreated();
		}
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTbl_Archer(Tbl_Archer instance);
    partial void UpdateTbl_Archer(Tbl_Archer instance);
    partial void DeleteTbl_Archer(Tbl_Archer instance);
    partial void InsertTbl_Arrow(Tbl_Arrow instance);
    partial void UpdateTbl_Arrow(Tbl_Arrow instance);
    partial void DeleteTbl_Arrow(Tbl_Arrow instance);
    partial void InsertTbl_Score(Tbl_Score instance);
    partial void UpdateTbl_Score(Tbl_Score instance);
    partial void DeleteTbl_Score(Tbl_Score instance);
    #endregion
		
		public System.Data.Linq.Table<Tbl_Archer> Tbl_Archer
		{
			get
			{
				return this.GetTable<Tbl_Archer>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Arrow> Tbl_Arrow
		{
			get
			{
				return this.GetTable<Tbl_Arrow>();
			}
		}
		
		public System.Data.Linq.Table<Tbl_Score> Tbl_Score
		{
			get
			{
				return this.GetTable<Tbl_Score>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tbl_Archer")]
	public partial class Tbl_Archer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Archer_Id;
		
		private string _Archer_Name;
		
		private string _Archer_Guild;
		
		private double _Archer_Avarage;
		
		private EntitySet<Tbl_Score> _Tbl_Score;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArcher_IdChanging(int value);
    partial void OnArcher_IdChanged();
    partial void OnArcher_NameChanging(string value);
    partial void OnArcher_NameChanged();
    partial void OnArcher_GuildChanging(string value);
    partial void OnArcher_GuildChanged();
    partial void OnArcher_AvarageChanging(double value);
    partial void OnArcher_AvarageChanged();
    #endregion
		
		public Tbl_Archer()
		{
			this._Tbl_Score = new EntitySet<Tbl_Score>(new Action<Tbl_Score>(this.attach_Tbl_Score), new Action<Tbl_Score>(this.detach_Tbl_Score));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archer_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Archer_Id
		{
			get
			{
				return this._Archer_Id;
			}
			set
			{
				if ((this._Archer_Id != value))
				{
					this.OnArcher_IdChanging(value);
					this.SendPropertyChanging();
					this._Archer_Id = value;
					this.SendPropertyChanged("Archer_Id");
					this.OnArcher_IdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archer_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Archer_Name
		{
			get
			{
				return this._Archer_Name;
			}
			set
			{
				if ((this._Archer_Name != value))
				{
					this.OnArcher_NameChanging(value);
					this.SendPropertyChanging();
					this._Archer_Name = value;
					this.SendPropertyChanged("Archer_Name");
					this.OnArcher_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archer_Guild", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Archer_Guild
		{
			get
			{
				return this._Archer_Guild;
			}
			set
			{
				if ((this._Archer_Guild != value))
				{
					this.OnArcher_GuildChanging(value);
					this.SendPropertyChanging();
					this._Archer_Guild = value;
					this.SendPropertyChanged("Archer_Guild");
					this.OnArcher_GuildChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archer_Avarage", DbType="Float NOT NULL")]
		public double Archer_Avarage
		{
			get
			{
				return this._Archer_Avarage;
			}
			set
			{
				if ((this._Archer_Avarage != value))
				{
					this.OnArcher_AvarageChanging(value);
					this.SendPropertyChanging();
					this._Archer_Avarage = value;
					this.SendPropertyChanged("Archer_Avarage");
					this.OnArcher_AvarageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archer_ID", Storage="_Tbl_Score", ThisKey="Archer_Id", OtherKey="Archer_ID", DeleteRule="NO ACTION")]
		public EntitySet<Tbl_Score> Tbl_Score
		{
			get
			{
				return this._Tbl_Score;
			}
			set
			{
				this._Tbl_Score.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Score(Tbl_Score entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Archer = this;
		}
		
		private void detach_Tbl_Score(Tbl_Score entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Archer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tbl_Arrow")]
	public partial class Tbl_Arrow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Arrow_ID;
		
		private int _Score_ID;
		
		private string _Arrow_Location;
		
		private int _Arrow_Point1;
		
		private int _Arrow_Point2;
		
		private int _Arrow_Point3;
		
		private EntityRef<Tbl_Score> _Tbl_Score;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArrow_IDChanging(int value);
    partial void OnArrow_IDChanged();
    partial void OnScore_IDChanging(int value);
    partial void OnScore_IDChanged();
    partial void OnArrow_LocationChanging(string value);
    partial void OnArrow_LocationChanged();
    partial void OnArrow_Point1Changing(int value);
    partial void OnArrow_Point1Changed();
    partial void OnArrow_Point2Changing(int value);
    partial void OnArrow_Point2Changed();
    partial void OnArrow_Point3Changing(int value);
    partial void OnArrow_Point3Changed();
    #endregion
		
		public Tbl_Arrow()
		{
			this._Tbl_Score = default(EntityRef<Tbl_Score>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrow_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Arrow_ID
		{
			get
			{
				return this._Arrow_ID;
			}
			set
			{
				if ((this._Arrow_ID != value))
				{
					this.OnArrow_IDChanging(value);
					this.SendPropertyChanging();
					this._Arrow_ID = value;
					this.SendPropertyChanged("Arrow_ID");
					this.OnArrow_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score_ID", DbType="Int NOT NULL")]
		public int Score_ID
		{
			get
			{
				return this._Score_ID;
			}
			set
			{
				if ((this._Score_ID != value))
				{
					if (this._Tbl_Score.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnScore_IDChanging(value);
					this.SendPropertyChanging();
					this._Score_ID = value;
					this.SendPropertyChanged("Score_ID");
					this.OnScore_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrow_Location", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Arrow_Location
		{
			get
			{
				return this._Arrow_Location;
			}
			set
			{
				if ((this._Arrow_Location != value))
				{
					this.OnArrow_LocationChanging(value);
					this.SendPropertyChanging();
					this._Arrow_Location = value;
					this.SendPropertyChanged("Arrow_Location");
					this.OnArrow_LocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrow_Point1", DbType="Int NOT NULL")]
		public int Arrow_Point1
		{
			get
			{
				return this._Arrow_Point1;
			}
			set
			{
				if ((this._Arrow_Point1 != value))
				{
					this.OnArrow_Point1Changing(value);
					this.SendPropertyChanging();
					this._Arrow_Point1 = value;
					this.SendPropertyChanged("Arrow_Point1");
					this.OnArrow_Point1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrow_Point2", DbType="Int NOT NULL")]
		public int Arrow_Point2
		{
			get
			{
				return this._Arrow_Point2;
			}
			set
			{
				if ((this._Arrow_Point2 != value))
				{
					this.OnArrow_Point2Changing(value);
					this.SendPropertyChanging();
					this._Arrow_Point2 = value;
					this.SendPropertyChanged("Arrow_Point2");
					this.OnArrow_Point2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Arrow_Point3", DbType="Int NOT NULL")]
		public int Arrow_Point3
		{
			get
			{
				return this._Arrow_Point3;
			}
			set
			{
				if ((this._Arrow_Point3 != value))
				{
					this.OnArrow_Point3Changing(value);
					this.SendPropertyChanging();
					this._Arrow_Point3 = value;
					this.SendPropertyChanged("Arrow_Point3");
					this.OnArrow_Point3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Score_ID", Storage="_Tbl_Score", ThisKey="Score_ID", OtherKey="Score_ID", IsForeignKey=true)]
		public Tbl_Score Tbl_Score
		{
			get
			{
				return this._Tbl_Score.Entity;
			}
			set
			{
				Tbl_Score previousValue = this._Tbl_Score.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Score.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Score.Entity = null;
						previousValue.Tbl_Arrow.Remove(this);
					}
					this._Tbl_Score.Entity = value;
					if ((value != null))
					{
						value.Tbl_Arrow.Add(this);
						this._Score_ID = value.Score_ID;
					}
					else
					{
						this._Score_ID = default(int);
					}
					this.SendPropertyChanged("Tbl_Score");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="tbl_Score")]
	public partial class Tbl_Score : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Score_ID;
		
		private int _Archer_ID;
		
		private System.Nullable<int> _Score_Totaal;
		
		private System.Nullable<int> _Score;
		
		private EntityRef<Tbl_Archer> _Tbl_Archer;
		
		private EntitySet<Tbl_Arrow> _Tbl_Arrow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScore_IDChanging(int value);
    partial void OnScore_IDChanged();
    partial void OnArcher_IDChanging(int value);
    partial void OnArcher_IDChanged();
    partial void OnScore_TotaalChanging(System.Nullable<int> value);
    partial void OnScore_TotaalChanged();
    partial void OnScoreChanging(System.Nullable<int> value);
    partial void OnScoreChanged();
    #endregion
		
		public Tbl_Score()
		{
			this._Tbl_Archer = default(EntityRef<Tbl_Archer>);
			this._Tbl_Arrow = new EntitySet<Tbl_Arrow>(new Action<Tbl_Arrow>(this.attach_Tbl_Arrow), new Action<Tbl_Arrow>(this.detach_Tbl_Arrow));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Score_ID
		{
			get
			{
				return this._Score_ID;
			}
			set
			{
				if ((this._Score_ID != value))
				{
					this.OnScore_IDChanging(value);
					this.SendPropertyChanging();
					this._Score_ID = value;
					this.SendPropertyChanged("Score_ID");
					this.OnScore_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Archer_ID", DbType="Int NOT NULL")]
		public int Archer_ID
		{
			get
			{
				return this._Archer_ID;
			}
			set
			{
				if ((this._Archer_ID != value))
				{
					if (this._Tbl_Archer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArcher_IDChanging(value);
					this.SendPropertyChanging();
					this._Archer_ID = value;
					this.SendPropertyChanged("Archer_ID");
					this.OnArcher_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score_Totaal", DbType="Int")]
		public System.Nullable<int> Score_Totaal
		{
			get
			{
				return this._Score_Totaal;
			}
			set
			{
				if ((this._Score_Totaal != value))
				{
					this.OnScore_TotaalChanging(value);
					this.SendPropertyChanging();
					this._Score_Totaal = value;
					this.SendPropertyChanged("Score_Totaal");
					this.OnScore_TotaalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Score", DbType="Int")]
		public System.Nullable<int> Score
		{
			get
			{
				return this._Score;
			}
			set
			{
				if ((this._Score != value))
				{
					this.OnScoreChanging(value);
					this.SendPropertyChanging();
					this._Score = value;
					this.SendPropertyChanged("Score");
					this.OnScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Archer_ID", Storage="_Tbl_Archer", ThisKey="Archer_ID", OtherKey="Archer_Id", IsForeignKey=true)]
		public Tbl_Archer Tbl_Archer
		{
			get
			{
				return this._Tbl_Archer.Entity;
			}
			set
			{
				Tbl_Archer previousValue = this._Tbl_Archer.Entity;
				if (((previousValue != value) 
							|| (this._Tbl_Archer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tbl_Archer.Entity = null;
						previousValue.Tbl_Score.Remove(this);
					}
					this._Tbl_Archer.Entity = value;
					if ((value != null))
					{
						value.Tbl_Score.Add(this);
						this._Archer_ID = value.Archer_Id;
					}
					else
					{
						this._Archer_ID = default(int);
					}
					this.SendPropertyChanged("Tbl_Archer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Score_ID", Storage="_Tbl_Arrow", ThisKey="Score_ID", OtherKey="Score_ID", DeleteRule="NO ACTION")]
		public EntitySet<Tbl_Arrow> Tbl_Arrow
		{
			get
			{
				return this._Tbl_Arrow;
			}
			set
			{
				this._Tbl_Arrow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tbl_Arrow(Tbl_Arrow entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Score = this;
		}
		
		private void detach_Tbl_Arrow(Tbl_Arrow entity)
		{
			this.SendPropertyChanging();
			entity.Tbl_Score = null;
		}
	}
}
#pragma warning restore 1591
